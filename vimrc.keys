"======================================================
"
"		键位绑定配置文件
"
"======================================================

" 修改leader键
let mapleader = ','
let g:mapleader = ','

" 使用';'快速进入命令行
nnoremap ; :

" kj 替换 Esc 
inoremap ii <Esc>

" 使用<leader>键+q来退出vim
map <leader>q :q<CR>
" 使用<leader>键+w来退出vim并保存
map <leader>w :wq<CR>

" 交换 ' `, 使得可以快速使用'跳到marked位置
nnoremap ' `
"nnoremap ` '

" 分屏窗口移动
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l


" 更改窗口大小
nmap w=  :resize +3<CR>
nmap w-  :resize -3<CR>
nmap w,  :vertical resize -3<CR>
nmap w.  :vertical resize +3<CR>

" 搜索相关
" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
" 进入搜索Use sane regexes"
nnoremap / /\v
vnoremap / /\v

" 目录树
map <leader>n :NERDTreeToggle<CR>

" F6折叠块和打开块折叠(和.vimrc中自定义函数UnroMe配合)
noremap <F6> :call UnrolMe()<CR>    
" F7折叠所有块打开所有块折叠(和.vimrc中自定义函数UnroMe配合)
noremap <F7> :call UnrolAll()<CR>

   
" 快速移动vim-easymotion键位绑定 {{{
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
map <Leader><leader>. <Plug>(easymotion-repeat))"
" }}}
"
" tagbar标签插件键位绑定 {{{
nmap <leader>m :TagbarToggle<CR>
" }}}
"
" Emmet快捷键绑定 {{{
nmap <leader><leader>y <C-Z>
" }}}
" 文本搜索 {{{
map <leader>f :CtrlPMRU<CR> 
" }}}
" F2 行号开关，用于鼠标复制代码用
" 为方便复制，用<F2>开启/关闭行号显示:
function! HideNumber()
  if(&relativenumber == &number)
    set relativenumber! number!
  elseif(&number)
    set number!
  else
    set relativenumber!
  endif
  set number?
endfunc
nnoremap <F2> :call HideNumber()<CR>

"F5为一键运行代码 {{{
    map <F5> :call CompileRunGcc()<CR>
    func! CompileRunGcc()
        exec "w"
        if &filetype == 'c'
            exec "! g++ % -o %<"
            exec "!time ./%<"
        elseif &filetype == 'sh'
            :! time bash %
        elseif &filetype == 'python'
            exec "! time python %"
        endif
    endfunc
" }}}
